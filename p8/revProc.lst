     1                                  ; NAME : Louisa Houser
     2                                  ; Assignment : P8 - Reverse Array
     3                                  ; Purpose: To be given three arrays and reverse each one using methods and practice pushing arrays
     4                                  ; Date : 11/08/23
     5                                  
     6                                  
     7                                  SECTION .data
     8                                  ; define data/variables here.  Think DB, DW, DD, DQ
     9                                  
    10 00000000 010000000200000003-     array1: dd      1,2,3,4,5
    11 00000009 000000040000000500-
    12 00000012 0000               
    13                                  len1:   EQU     ($-array1)
    14                                  
    15                                  
    16 00000014 F6FFFFFFF7FFFFFFF8-     array2: dd      -10, -9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9
    17 0000001D FFFFFFF9FFFFFFFAFF-
    18 00000026 FFFFFBFFFFFFFCFFFF-
    19 0000002F FFFDFFFFFFFEFFFFFF-
    20 00000038 FFFFFFFF0000000001-
    21 00000041 000000020000000300-
    22 0000004A 000004000000050000-
    23 00000053 000600000007000000-
    24 0000005C 0800000009000000   
    25                                  len2:   EQU     ($-array2)
    26                                  
    27                                  
    28 00000064 000000000A00000014-     array3: dd  0,10,20,30,40,50,60,70,80,90
    29 0000006D 0000001E0000002800-
    30 00000076 0000320000003C0000-
    31 0000007F 004600000050000000-
    32 00000088 5A000000           
    33 0000008C 640000006E00000078-       dd  100,110,120,130,140,150,160,170,180,190
    34 00000095 000000820000008C00-
    35 0000009E 000096000000A00000-
    36 000000A7 00AA000000B4000000-
    37 000000B0 BE000000           
    38 000000B4 C8000000D2000000DC-       dd  200,210,220,230,240,250,260,270,280,290
    39 000000BD 000000E6000000F000-
    40 000000C6 0000FA000000040100-
    41 000000CF 000E01000018010000-
    42 000000D8 22010000           
    43 000000DC 2C0100003601000040-       dd  300,310,320,330,340,350,360,370,380,390
    44 000000E5 0100004A0100005401-
    45 000000EE 00005E010000680100-
    46 000000F7 00720100007C010000-
    47 00000100 86010000           
    48 00000104 900100009A010000A4-       dd  400,410,420,430,440,450,460,470,480,490,500
    49 0000010D 010000AE010000B801-
    50 00000116 0000C2010000CC0100-
    51 0000011F 00D6010000E0010000-
    52 00000128 EA010000F4010000   
    53                                  len3:   EQU     ($-array3)
    54                                  
    55 00000130 00000000                storeOne: dd 0
    56                                  
    57                                  SECTION .bss
    58                                  ; define uninitialized data here
    59                                  
    60                                  SECTION .text
    61                                  global _main
    62                                  _main:
    63                                  
    64                                  	;---- CALL FIRST ARRAY ----
    65 00000000 B8[00000000]                    mov eax, array1
    66 00000005 B914000000                      mov ecx, len1
    67 0000000A 89C6                    	mov esi, eax		; store eax to later use when popping stack
    68 0000000C 89CF                    	mov edi, ecx		; store ecx to later use when popping stack
    69 0000000E E828000000              	call reverse		; call reverse function below
    70                                  
    71                                  	;---- CALL SECOND ARRAY ----
    72 00000013 B8[14000000]            	mov eax, array2
    73 00000018 B950000000              	mov ecx, len2
    74 0000001D 89C6                            mov esi, eax		; store eax to later use when popping stack
    75 0000001F 89CF                            mov edi, ecx		; store ecx to later use when popping stack
    76 00000021 E815000000              	call reverse		; call reverse function below
    77                                  
    78                                  	;---- CALL THIRD ARRAY ----
    79 00000026 B8[64000000]            	mov eax, array3
    80 0000002B B9CC000000              	mov ecx, len3
    81 00000030 89C6                            mov esi, eax		; store eax to later use when popping stack
    82 00000032 89CF                            mov edi, ecx		; store ecx to later use when popping stack
    83 00000034 E802000000              	call reverse		; call reverse function below
    84                                  
    85 00000039 EB1D                    	jmp lastBreak		; jump to lastBreak so it does not run through functions again
    86                                  
    87                                  ;------------------------------
    88                                  ;	REVERSE FUNCTION
    89                                  ;------------------------------
    90                                  reverse:
    91                                  
    92                                  	pushTop:
    93 0000003B FF30                    	 	push DWORD [eax]	; push each value of array
    94 0000003D 83C004                          	add eax, 4		; increase index of array
    95 00000040 83E903                  		sub ecx, 3		; subtract ecx by 3 because len is bits, so rather than divide by 4, I can subtract by 3 and then let the loop method subtract the other 1
    96 00000043 E2F6                            	loop pushTop	
    97                                  
    98 00000045 89F9                    	mov ecx, edi			; get back to beginning of the array
    99 00000047 89F0                    	mov eax, esi			; get back to beginning of array
   100                                  
   101                                  	popTop:
   102 00000049 8F00                     		pop DWORD [eax]		; pop each value that was pushed
   103 0000004B 83C004                   	      	add eax, 4		; increase index of array
   104 0000004E 83E903                  		sub ecx, 3		; same thing as above
   105 00000051 E2F6                           		loop popTop	
   106                                  	
   107 00000053 31C0                    	xor eax, eax			; precautionary measures for next loop through reverse
   108 00000055 31C9                    	xor ecx, ecx		
   109                                  
   110 00000057 C3                      	ret				; return to where reverse method was called
   111                                  
   112                                  lastBreak:
   113                                  
   114                                  
   115                                  ; Normal termination code
   116 00000058 B801000000              mov eax, 1
   117 0000005D BB00000000              mov ebx, 0
   118 00000062 CD80                    int 80h
   119                                  
