     1                                  ; NAME : Louisa Houser
     2                                  ; Assignment : Program 5 - Max Fibonacci Sequence
     3                                  ; Description: Create a fibonacci sequence by entering the first two elements and then loop to create the rest and find out what the max fibonnaci number is, and how many sequences it took.
     4                                  ;Date : October 16, 2023
     5                                  ; Etc...
     6                                  
     7                                  SECTION .data
     8                                  ; define data/variables here.  Think DB, DW, DD, DQ
     9                                  
    10                                  SECTION .bss
    11                                  ; define uninitialized data here
    12                                  
    13 00000000 <res 00000040>          Fibs:     RESD 16
    14 00000040 <res 00000004>          MaxFib:   RESD 1
    15 00000044 <res 00000002>          FibCount: RESW 1
    16                                  
    17                                  SECTION .text
    18                                  global _main
    19                                  _main:
    20                                  
    21                                  ; put your code here.
    22 00000000 C705[00000000]0000-     mov DWORD[Fibs], 0      ; assign 0 to location of index 0
    23 00000008 0000               
    24 0000000A C705[04000000]0100-     mov DWORD[Fibs + 4], 1  ; assign 1 to location of index 1
    25 00000012 0000               
    26                                  
    27 00000014 B804000000              mov eax, 4		; set eax to 4 
    28 00000019 66C705[44000000]02-     mov WORD[FibCount], 2 	; move two into the FibCount to account for the two numbers we manually added
    29 00000021 00                 
    30                                  
    31                                  fibonacciLoop:
    32 00000022 8B98[00000000]          	mov ebx, [Fibs + eax]		 ; move last value of array into ebx
    33 00000028 89DA                    	mov edx, ebx         		 ; move ebx value into edx to save for later
    34 0000002A 83E804                  	sub eax, 4	     		 ; subtract 4 from eax to later get value stored in the previous element
    35 0000002D 0398[00000000]          	add ebx, [Fibs + eax]		 ; add second to last value of array into ebx
    36 00000033 7212                    	jc foundMax			 ; jump to stop if carry is set by add operation
    37 00000035 83C008                  	add eax, 8           		 ; move eax back to next element slot in the array
    38 00000038 8998[00000000]          	mov [Fibs + eax], ebx		 ; move ebx value into the next element slot in the array
    39 0000003E 66FF05[44000000]        	inc WORD[FibCount]		 ; increase FibCount
    40 00000045 EBDB                        	jmp fibonacciLoop		 ; jump to the beginning of the loop
    41                                  	
    42                                  
    43                                  foundMax:
    44                                  	; we do not need to increase FibCount because we just found the max
    45 00000047 8915[40000000]          	mov [MaxFib], edx		; move last value into MaxFib
    46                                  
    47                                  lastBreak:
    48                                  
    49                                  ; Normal termination code
    50 0000004D B801000000              mov eax, 1
    51 00000052 BB00000000              mov ebx, 0
    52 00000057 CD80                    int 80h
    53                                  
